{
    "Initialize Processing Sketch": {
		"prefix": "setup()",
		"body": [
			"void setup(){",
			"\t$1",
			"}",
			"void draw(){",
			"\t$2",
			"}"
		],
		"description": "Initialize Processing Sketch"
	},
	"sysout": {
		"prefix": "sysout",
		"body": [
			"System.out.println($0);"
		],
		"description": "Print to standard out"
	},
	"fori": {
		"prefix": "fori",
		"body": [
			"for (${1:int} ${2:i} = ${3:0}; $2 < ${4:max}; $2++) {",
			"\t$0",
			"}"
		],
		"description": "Indexed for loop"
	},
	"foreach": {
		"prefix": "foreach",
		"body": [
			"for (${1:type} ${2:var} : ${3:iterable}) {",
			"\t$0",
			"}"
		],
		"description": "Enhanced for loop"
	},
	"Public constructor": {
		"prefix": "ctor",
		"body": [
			"public ${1:${TM_FILENAME_BASE}}($2) {",
			"\t${0:super();}",
			"}"
		],
		"description": "Public constructor"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if (${1:condition}) {",
			"\t$0",
			"}"
		],
		"description": "if statement"
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": [
			"if (${1:condition}) {",
			"\t$2",
			"} else {",
			"\t$0",
			"}"
		],
		"description": "if/else statement"
	},
	"ifnull": {
		"prefix": "ifnull",
		"body": [
			"if (${1:condition} == null) {",
			"\t$0",
			"}"
		],
		"description": "if statement checking for null"
	},
	"ifnotnull": {
		"prefix": "ifnotnull",
		"body": [
			"if (${1:condition} != null) {",
			"\t$0",
			"}"
		],
		"description": "if statement checking for not null"
	},
	"trycatch": {
		"prefix": "try catch",
		"body": [
			"try {",
			"\t$1",
			"} catch (${2:Exception} ${3:e}) {",
			"\t$4//${0:TODO}: handle exception",
			"}"
		],
		"description": "try/catch block"
	},
	"tryresources": {
		"prefix": "try resources",
		"body": [
			"try ($1) {",
			"\t$2",
			"} catch (${3:Exception} ${4:e}) {",
			"\t$5//${0:TODO}: handle exception",
			"}"
		]
	},
	"private_method": {
		"prefix": "private method",
		"body": [
			"private ${1:void} ${2:name}($3) {",
			"\t$0",
			"}"
		],
		"description": "private method"
	},
	"Public method": {
		"prefix": "public method",
		"body": [
			"public ${1:void} ${2:name}(${3}) {",
			"\t$0",
			"}"
		],
		"description": "public method"
	},
	"Protected Method": {
		"prefix": "protected method",
		"body": [
			"protected ${1:void} ${2:name}(${3}) {",
			"\t$0",
			"}"
		],
		"description": "Protected method"
	},
	"Switch Statement": {
		"prefix": "switch",
		"body": [
			"switch (${1:key}) {",
			"\tcase ${2:value}:",
			"\t\t$0",
			"\t\tbreak;",
			"",
			"\tdefault:",
			"\t\tbreak;",
			"}"
		],
		"description": "Switch Statement"
	},
	"While Statement": {
		"prefix": "while",
		"body": [
			"while (${1:condition}) {",
			"\t$0",
			"}"
		],
		"description": "While Statement"
	},
	"Do-While Statement": {
		"prefix": "dowhile",
		"body": [
			"do {",
			"\t$0",
			"} while (${1:condition});"
		],
		"description": "Do-While Statement"
	},
	"newObject": {
		"prefix": "new",
		"body": [
			"${0:Object} ${1:foo} = new ${0:Object}();"
		],
		"description": "Create new Object"
	},
	"Private field": {
		"prefix": "prf",
		"body": [
			"private ${1:String} ${2:name};"
		],
		"description": "Private field"
	},


	"thread": {
		"prefix": "thread(<string>)",
		"body":[
			"thread($0)"
		],
		"description": "Creating a thread"
	},


	"delay":{
		"prefix": "delay(<int>)",
		"body":[
			"delay($0)"
		],
		"description": "Add a delay"
	},
	"frameRate":{
		"prefix": "frameRate(<int>)",
		"body":[
			"frameRate($0)"
		],
		"description": "Fix Frame Rate"
	},
	"pixelDensity":{
		"prefix": "pixelDensity(<int>)",
		"body":[
			"pixelDensity($0)"
		],
		"description": "Add Pixel Density"
	},
	"settings":{
		"prefix": "settings()",
		"body":[
			"void settings(){",
			"\t$0",
			"}"
		],
		"description": "Apply Settings to the Sketch"
	},
	"size2":{
		"prefix": "size(<int>,<int>)",
		"body":[
			"size($1, $2)"
		],
		"description": "Fix Size"
	},
	"size3":{
		"prefix": "size(<int>,<int>,<renderer>)",
		"body":[
			"size($1, $2, $3)"
		],
		"description": "Fix Size along with Renderers"
	},
	"smooth":{
		"prefix": "smooth(<int>)",
		"body":[
			"smooth($0)"
		],
		"description": "Add Smooth Property"
	},


	"join":{
		"prefix": "join(list, separator)",
		"body":[
			"join($1, $2)"
		],
		"description": "Combines an array of Strings into one String, each separated by the character(s) used for the separator parameter. To join arrays of ints or floats, it's necessary to first convert them to Strings using nf() or nfs()."
	},
	"match":{
		"prefix": "match(str, regexp)",
		"body":[
			"match($1, $2)"
		],
		"description": "This function is used to apply a regular expression to a piece of text, and return matching groups (elements found inside parentheses) as a String array. If there are no matches, a null value will be returned. If no groups are specified in the regular expression, but the sequence matches, an array of length 1 (with the matched text as the first element of the array) will be returned."
	},
	"matchAll":{
		"prefix": "matchAll(str, regexp)",
		"body":[
			"matchAll($1, $2)"
		],
		"description": "This function is used to apply a regular expression to a piece of text, and return a list of matching groups (elements found inside parentheses) as a two-dimensional String array. If there are no matches, a null value will be returned. If no groups are specified in the regular expression, but the sequence matches, a two dimensional array is still returned, but the second dimension is only of length one."
	},
	"nf1":{
		"prefix": "nf(num)",
		"body":[
			"nf($0)"
		],
		"description": "Utility function for formatting numbers into strings. There are two versions: one for formatting floats, and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers."
	},
	"nf2":{
		"prefix": "nf(num, digits)",
		"body":[
			"nf($1, $2)"
		],
		"description": "Utility function for formatting numbers into strings. There are two versions: one for formatting floats, and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers."
	},
	"nf3":{
		"prefix": "nf(num, left, right)",
		"body":[
			"nf($1, $2, $3)"
		],
		"description": "Utility function for formatting numbers into strings. There are two versions: one for formatting floats, and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers."
	},
	"nfc1":{
		"prefix": "nfc(num)",
		"body":[
			"nfc($0)"
		],
		"description": "Utility function for formatting numbers into strings and placing appropriate commas to mark units of 1000. There are four versions: one for formatting ints, one for formatting an array of ints, one for formatting floats, and one for formatting an array of floats."
	},
	"nfc2":{
		"prefix": "nfc(num, right)",
		"body":[
			"nfc($1, $2)"
		],
		"description": "Utility function for formatting numbers into strings and placing appropriate commas to mark units of 1000. There are four versions: one for formatting ints, one for formatting an array of ints, one for formatting floats, and one for formatting an array of floats."
	},
	"nfp1":{
		"prefix": "nfp(num, digits)",
		"body":[
			"nfp($1, $2)"
		],
		"description": "Utility function for formatting numbers into strings. Similar to nf() but puts a \"+\" in front of positive numbers and a \"-\" in front of negative numbers. There are two versions: one for formatting floats, and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers."
	},
	"nfp2":{
		"prefix": "nfp(num, left, right)",
		"body":[
			"nfp($1, $2, $3)"
		],
		"description": "Utility function for formatting numbers into strings. Similar to nf() but puts a \"+\" in front of positive numbers and a \"-\" in front of negative numbers. There are two versions: one for formatting floats, and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers."
	},
	"nfs1":{
		"prefix": "nfs(num, digits)",
		"body":[
			"nfs($1, $2)"
		],
		"description": "Utility function for formatting numbers into strings. Similar to nf(), but leaves a blank space in front of positive numbers so they align with negative numbers in spite of the minus symbol. There are two versions: one for formatting floats, and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers."
	},
	"nfs2":{
		"prefix": "nfs(num, left, right)",
		"body":[
			"nfs($1, $2, $3)"
		],
		"description": "Utility function for formatting numbers into strings. Similar to nf(), but leaves a blank space in front of positive numbers so they align with negative numbers in spite of the minus symbol. There are two versions: one for formatting floats, and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers."
	},
	"split":{
		"prefix": "split(value, delim)",
		"body":[
			"split($1, $2)"
		],
		"description": "The split() function breaks a String into pieces using a character or string as the delimiter. The delim parameter specifies the character or characters that mark the boundaries between each piece. A String[] array is returned that contains each of the pieces. "
	},
	"splitTokens1":{
		"prefix": "splitTokens(value)",
		"body":[
			"splitTokens($0)"
		],
		"description": "The splitTokens() function splits a String at one or many character delimiters or \"tokens.\" The delim parameter specifies the character or characters to be used as a boundary."
	},
	"splitTokens2":{
		"prefix": "splitTokens(value, delim)",
		"body":[
			"splitTokens($1, $2)"
		],
		"description": "The splitTokens() function splits a String at one or many character delimiters or \"tokens.\" The delim parameter specifies the character or characters to be used as a boundary."
	},
	"trim":{
		"prefix": "trim(str/array)",
		"body":[
			"trim($0)"
		],
		"description": "Removes whitespace characters from the beginning and end of a String. In addition to standard whitespace characters such as space, carriage return, and tab, this function also removes the Unicode \"nbsp\" character."
	}	

}